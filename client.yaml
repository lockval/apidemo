- name: request, response and config
  comment: |
    This example will show you how to read user input and config file and return them to the client
    keywords: **input.Requ, ExcelConfig**
    The config file is main.json, you can display it directly on the button above
    When you execute:
      - npm run serverJsBuildAndUpload
      - npm run serverLuaBuildAndUpload
      - npm run serverStarBuildAndUpload
      - ./serverGoBuildAndUpload.sh
    
    The above script will first upload main.json and then upload the server script
    **Please note**: If you want the config file to take effect, you must change the server code.
  KeySubList: []
  Call: 
      name: testRequResp
      comment: 
      params:
        param1: string
        param2: number
        param3: boolean



- name: read and write kv
  comment: |
    this is a read and write kv example, Count increments by 1
    keywords: **GetSubVal, GetAndLock, PutSubVal, PutAndUnlock**
  KeySubList:
    - name: mBase
      comment: Count is a counter
  Call: 
      name: testBaseCount
      comment: 



- name: list queue mode
  comment: |
    In order, push data to the end of the list, and excess data will shift out from the front
    keywords: **List(**
  KeySubList:
    - name: mList
      comment: list mode
  Call: 
      name: testListQueue
      comment: 
      params:
        first: string
        second: string



- name: list stack mode
  comment: |
    First pop up the n pieces behind the old data, and then push data to the end of the list
    keywords: **List(**
  KeySubList:
    - name: mList
      comment: list mode
  Call: 
      name: testListStack
      comment: 
      params:
        n: number



- name: clear data
  comment:  |
    Clear data before doing anything
    keywords: **Clear(**
  KeySubList:
    - name: mList
      comment: list mode
  Call: 
      name: testClearData
      comment: 

- name: get all data
  comment:  |
    There are two ways to get all the data
    - **GetSubVal(input.UID, "mList")**
    - **GetSubValAll(input.UID, "mList")**
    
    other api: **DiscardAndUnlock**
    - like **PutAndUnlock**, but does not modify any data
  KeySubList: []
  Call: 
      name: testGetAll
      comment: 



- name: put link
  comment:  |
    Associate other KeySub when putting data
    keywords: **Link(**
  KeySubList:
    - name: mList
      comment: list mode
    - name: mListSlave
      comment: list mode
  Call: 
      name: testPutLink
      comment: 
      params:
        first: string
        second: string



- name: throw a user error
  comment: |
    like read and write kv, but execution is interrupted.
    keywords: **Throw(**
  KeySubList:
    - name: mBase
      comment: Count is a counter
  Call: 
      name: testThrow
      comment: 



- name: advanced query
  comment: |
    In addition to **GetSubVal** and **GetSubValAll**, we also provide other query methods.
    keywords: **Group, Len, Max, Min, Random, Range, Search, Sum, Unique**
  KeySubList: []
  Call: 
      name: testOtherQuery
      comment: 



- name: Prepare a globalChat struct
  comment: |
    Sometimes, we need to develop some interactive services, such as chat system. At this time we need to watch a public UID and modify it when needed.

    - In the client
      1. we need to define which keys this structure contains. These codes are somewhat similar to player.ts.

    - In the server side:
      1. Write the "watch" file. According to your own needs, judge whether this call can be allowed
      2. Write the "init" file. Let lockval know which fields can be synchronized to the client

    After the above preparations, you can execute player.Watch to watch a public UID. You can see the data change in the example below
  StructName: 
      name: globalChat
      comment: 
  IDs: [the001]



- name: send A message to globalChat
  comment: |
    Please click Watch in the example above before Call

    Add data to globalChat:the001. This way users watching globalChat:the001 will see the changes
  KeySubList:
    - name: mChatList
      comment: chat history here
      structName: globalChat
      structID: the001
    - name: mChatID
      comment: who sent the message
      structName: globalChat
      structID: the001
  Call: 
      name: testChat
      comment: 
      params:
        text: string



- name: Delayed execution of calling code
  comment: |
    Execute "sys/testItsTime" after setting 3 seconds
    keywords: **Sleep**
    Please pay attention to the data changes in the example below
  KeySubList: []
  Call: 
      name: testSleep
      comment: 



- name: Delayed execution entity code
  comment: |
    do something when it's time
    Here's the Sleep call from the example above
  KeySubList:
    - name: mBase
      comment: Count is a counter
  sys: 
      name: testItsTime
      comment: 



- name: Use api.so for more functionality
  comment: |
    Generate api.so files by writing plug-ins to support more functions for server-side script codes
    This G.Sum function can click [here](https://github.com/lockval/api.so) to view the source code
  KeySubList: []
  Call: 
      name: testG
      comment: 


- name: get link
  comment:  |
    Associate other KeySub when getting data
    keywords: **Link(**
  KeySubList: []
  Call: 
      name: testGetLink
      comment: 
